import { useState, useEffect, ChangeEvent } from "react";
import { useParams, useNavigate } from "react-router";
import { useForm, SubmitHandler } from "react-hook-form";
import { useBooks } from "../../services/BookService";
import Book from "../../types/Book";
import { authors } from "../../data/AuthorData";
import { categories } from "../../data/CategoryData";

type BookFormData = {
    title: string;
    shortDescription: string;
    isbn: string;
    authorid: number;
    category: string;
    price: number;
    pageCount: number;
    thumbnailUrl: string;
    publishedDate: string;
};

function EditBook() {
    // üìå 1) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ useParams ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ bookid ‡∏à‡∏≤‡∏Å URL ‡πÅ‡∏•‡∏∞ useNavigate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
    const { bookid } = useParams<{ bookid: string }>();
    const navigate = useNavigate();


    // üìå 2) ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ custom hook useBooks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    const { books, loading, error, fetchBooks, updateBook, uploadBookCover } = useBooks();


    // üìå 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    const [book, setBook] = useState<Book | null>(null);
    const [coverFile, setCoverFile] = useState<File | null>(null);
    const [coverPreview, setCoverPreview] = useState<string>("");
    const [isSaving, setIsSaving] = useState<boolean>(false);
    const [saveError, setSaveError] = useState<string | null>(null);
    const [saveSuccess, setSaveSuccess] = useState<boolean>(false);


    // üìå 4) ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô useForm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    const { register, handleSubmit, setValue, formState: { errors } } = useForm<BookFormData>({
        defaultValues: {
          title: "",
          shortDescription: "",
          isbn: "",
          authorid: 0,
          category: "",
          price: 1,
          pageCount: 1,
          thumbnailUrl: "",
          publishedDate: "",
        }
      });


    // üìå 5) ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    useEffect(() => {
        if (bookid && books.length > 0) {
          const bookIdNum = parseInt(bookid);
          const foundBook = books.find((b) => b.bookid === bookIdNum);
      
          if (foundBook) {
            setBook(foundBook);
            
            // Set form values
            setValue("title", foundBook.title);
            setValue("shortDescription", foundBook.shortDescription);
            setValue("isbn", foundBook.isbn);
            setValue("authorid", foundBook.authorid);
            setValue("category", foundBook.category);
            setValue("price", foundBook.price);
            setValue("pageCount", foundBook.pageCount);
            setValue("thumbnailUrl", foundBook.thumbnailUrl);
            setValue("publishedDate", foundBook.publishedDate ? foundBook.publishedDate.split("T")[0] : "");
      
            
            if (foundBook.thumbnailUrl) {
              setCoverPreview(foundBook.thumbnailUrl);
              setCoverFile(null);
            } 
          }
        }
      }, [bookid, books, setValue]);


    // üìå 6) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
          const file = e.target.files[0];
          setCoverFile(file);
      
          // Create a preview
          const reader = new FileReader();
          reader.onload = () => {
            setCoverPreview(reader.result as string);
          };
          reader.readAsDataURL(file);
      
          setValue("thumbnailUrl", `${import.meta.env.VITE_BASE_URL_API}/books/cover/${bookid}`);
        }
      };


    // üìå 7) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const onSubmit: SubmitHandler<BookFormData> = async (data) => {
        if (!book) return;
      
        setIsSaving(true);
        setSaveError(null);
        setSaveSuccess(false);
      
        try {
          const bookId = book.bookid;
          
          // Upload the cover if a new one was selected
          if (coverFile) {
            await uploadBookCover(bookId, coverFile);
          }
      
          await updateBook(bookId, data);
      
          setSaveSuccess(true);
          setTimeout(() => {
            setSaveSuccess(false);
          }, 3000);
        } catch (err) {
          setSaveError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          console.error(err);
        } finally {
          setIsSaving(false);
        }
      };


    // üìå 8) ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (loading) {
        // Code
        return (
            <div className="flex justify-center items-center h-screen">
              <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          );
    }

    // üìå 9) ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (error) {
        // Code
        return (
            <div
              className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative"
              role="alert"
            >
              <strong className="font-bold">Error!</strong>
              <span className="block sm:inline"> {error}</span>
            </div>
          );
    }

    // üìå 10) ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
    if (!book) {
        // Code
        return (
            <div
              className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative"
              role="alert"
            >
              <strong className="font-bold">Book not found!</strong>
              <span className="block sm:inline">
                {" "}
                The requested book could not be found.
              </span>
            </div>
          );
    }

    return (
        <div className="container mx-auto px-4 py-8">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-3xl font-bold text-gray-800">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</h1>
                <button
                    onClick={() => navigate(-1)}
                    className="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded transition"
                >
                    <span className="inline-block mr-1">&#9664;</span> ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                </button>
            </div>

            {saveSuccess && (
                <div
                    className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4"
                    role="alert"
                >
                    <strong className="font-bold">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</strong>
                    <span className="block sm:inline"> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß</span>
                </div>
            )}

            {saveError && (
                <div
                    className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4"
                    role="alert"
                >
                    <strong className="font-bold">Error!</strong>
                    <span className="block sm:inline"> {saveError}</span>
                </div>
            )}

            <form
                onSubmit={handleSubmit(onSubmit)}
                className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4"
            >
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Book Cover */}
                    <div className="col-span-1 flex flex-col items-center">
                        <div className="w-full h-full max-w-sm mb-4">
                            <img
                                src={coverPreview || "../images/placeholder.png"}
                                alt="Book cover"
                                className="w-full h-full object-cover rounded-lg shadow-md"
                            />
                        </div>
                        <label className="w-full max-w-sm">
                            <span className="block text-gray-700 text-sm font-bold mb-2">
                                ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                            </span>
                            <input
                                type="file"
                                accept="image/*"
                                onChange={handleFileChange}
                                className="block w-full text-sm text-gray-500
                  file:mr-4 file:py-2 file:px-4
                  file:rounded file:border-0
                  file:text-sm file:font-semibold
                  file:bg-blue-50 file:text-blue-700
                  hover:file:bg-blue-100"
                            />
                        </label>
                    </div>

                    {/* Book Details */}
                    <div className="col-span-1">
                        <div className="mb-4">
                            <label
                                className="block text-gray-700 text-sm font-bold mb-2"
                                htmlFor="title"
                            >
                                ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
                            </label>
                            <input
                                className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.title ? 'border-red-500' : ''}`}
                                id="title"
                                type="text"
                                {...register("title", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" })}
                            />
                            {errors.title && (
                                <p className="text-red-500 text-xs italic">{errors.title.message}</p>
                            )}
                        </div>

                        {/* ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ */}
                        <div className="mb-4">
                            <label
                                className="block text-gray-700 text-sm font-bold mb-2"
                                htmlFor="isbn"
                            >
                                ISBN
                            </label>
                            <input
                                className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.isbn ? 'border-red-500' : ''}`}
                                id="isbn"
                                type="text"
                                {...register("isbn", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ISBN", maxLength: { value: 10, message: "ISBN ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" } })}
                            />
                            {errors.isbn && (
                                <p className="text-red-500 text-xs italic">{errors.isbn.message}</p>
                            )}
                        </div>


                        <div className="grid grid-cols-2 gap-4">
                            <div className="mb-4">
                                <label
                                    className="block text-gray-700 text-sm font-bold mb-2"
                                    htmlFor="price"
                                >
                                    ‡∏£‡∏≤‡∏Ñ‡∏≤
                                </label>
                                <input
                                    className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.price ? 'border-red-500' : ''}`}
                                    id="price"
                                    type="number"
                                    min="1"
                                    //step="0.01"
                                    {...register("price", {
                                        required: "Price is required",
                                        min: { value: 0, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡∏ö‡∏≤‡∏ó" },
                                        valueAsNumber: true
                                    })}
                                />
                                {errors.price && (
                                    <p className="text-red-500 text-xs italic">{errors.price.message}</p>
                                )}
                            </div>

                            <div className="mb-4">
                                <label
                                    className="block text-gray-700 text-sm font-bold mb-2"
                                    htmlFor="pageCount"
                                >
                                    ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                                </label>
                                <input
                                    className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.pageCount ? 'border-red-500' : ''}`}
                                    id="pageCount"
                                    type="number"
                                    min="1"
                                    {...register("pageCount", {
                                        required: "Page count is required",
                                        min: { value: 1, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πâ‡∏≤" },
                                        valueAsNumber: true
                                    })}
                                />
                                {errors.pageCount && (
                                    <p className="text-red-500 text-xs italic">{errors.pageCount.message}</p>
                                )}
                            </div>
                        </div>

                        <div className="mb-4">
                            <label
                                className="block text-gray-700 text-sm font-bold mb-2"
                                htmlFor="authorid"
                            >
                                ‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á
                            </label>
                            <select
                                id="authorid"
                                className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.authorid ? 'border-red-500' : ''}`}
                                {...register("authorid", {
                                    required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á",
                                    min: { value: 1, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á" },
                                    valueAsNumber: true
                                })}
                            >
                                <option value="0">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á</option>
                                {authors.map((author) => (
                                    <option key={author.id} value={author.id}>
                                        {author.name}
                                    </option>
                                ))}
                            </select>
                            {errors.authorid && (
                                <p className="text-red-500 text-xs italic">{errors.authorid.message}</p>
                            )}
                        </div>

                        <div className="mb-4">
                            <label
                                className="block text-gray-700 text-sm font-bold mb-2"
                                htmlFor="category"
                            >
                                ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                            </label>
                            <select
                                id="category"
                                className={`w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${errors.category ? 'border-red-500' : ''}`}
                                {...register("category", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" })}
                            >
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                                {categories.map((category) => (
                                    <option key={category} value={category}>
                                        {category}
                                    </option>
                                ))}
                            </select>
                            {errors.category && (
                                <p className="text-red-500 text-xs italic">{errors.category.message}</p>
                            )}
                        </div>

                        <div className="mb-4">
                            <label
                                className="block text-gray-700 text-sm font-bold mb-2"
                                htmlFor="publishedDate"
                            >
                                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏µ‡∏û‡∏¥‡∏°‡∏û‡πå
                            </label>
                            <input
                                className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.publishedDate ? 'border-red-500' : ''}`}
                                id="publishedDate"
                                type="date"
                                {...register("publishedDate", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" })}
                            />
                            {errors.publishedDate && (
                                <p className="text-red-500 text-xs italic">{errors.publishedDate.message}</p>
                            )}
                        </div>

                    </div>
                </div>

                {/* Description - Full Width */}
                <div className="mb-4 mt-4">
                    <label
                        className="block text-gray-700 text-sm font-bold mb-2"
                        htmlFor="shortDescription"
                    >
                        ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
                    </label>
                    <textarea
                        className={`shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline ${errors.shortDescription ? 'border-red-500' : ''}`}
                        id="shortDescription"
                        rows={4}
                        {...register("shortDescription", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢" })}
                    />
                    {errors.shortDescription && (
                        <p className="text-red-500 text-xs italic">{errors.shortDescription.message}</p>
                    )}
                </div>

                <div className="flex items-center justify-end gap-4 mt-6">
                    <button
                        type="button"
                        onClick={() => {
                            fetchBooks();
                        }}
                        className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition"
                    >
                        ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                    </button>
                    <button
                        type="submit"
                        disabled={isSaving}
                        className={`px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition ${isSaving ? "opacity-50 cursor-not-allowed" : ""
                            }`}
                    >
                        {isSaving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"}
                    </button>
                </div>
            </form>
        </div>
    );
}

export default EditBook;